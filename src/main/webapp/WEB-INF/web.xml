<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

	<display-name>spitter</display-name>
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
	
	<!-- Spring MVC -->
	<!-- 默认情况下DispatcherServlet会尝试从spitter-servlet.xml文件加载应用上下文 -->
	<servlet>
	    <servlet-name>spitter</servlet-name>
	    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	    <init-param>
	    	<param-name>contextConfigLocation</param-name>
	    	<param-value>/WEB-INF/spitter-servlet.xml</param-value>
	   	</init-param>
	    <load-on-startup>1</load-on-startup>
	</servlet>
	<!-- 映射到/,比映射到/*、/app和*htm 要好 -->
	<servlet-mapping>
	    <servlet-name>spitter</servlet-name>
	    <url-pattern>/</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.gif</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	
	<!-- 加载其他配置文件到Spring应用上下文中(spitter-servlet.xml) -->
	<listener>
	   <listener-class>
	      org.springframework.web.context.ContextLoaderListener
	   </listener-class>
	</listener>
	<context-param>
	    <param-name>contextConfigLocation</param-name>
	    <param-value>
	         /WEB-INF/spitter-security.xml,
	         classpath:dataSource-context.xml,
	         classpath:persistence-context.xml,
	         classpath:transaction-context.xml
	    </param-value>
	</context-param>
	
	<!-- 加载Log4J 配置文件  -->
	<!-- <context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>3000</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener> -->

    <!-- Spring Security 依赖一系列Servlet过滤器来提供不同的安全特性-->
    <!--  DelegatingFilterProxy将工作委托给javax.servlet.Filter的实现类-->
    <!-- Spring Security 将根据filter-name 创建一个ID为 springSecurityFilterChain的过滤器Bean-->
    <!-- springSecurityFilterChain本身是一个特殊的过滤器，它可以链接任意一个或多个其他的过滤器 -->
    <filter>
       <filter-name>springSecurityFilterChain</filter-name>
       <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

</web-app>
