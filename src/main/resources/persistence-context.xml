<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	    http://www.springframework.org/schema/jee
	    http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
	    http://www.springframework.org/schema/aop
	    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

   <!-- 扫描被@Repository标注的HibernateSpitterDao.class -->
   <context:component-scan base-package="com.habuma.spitter" />
   
    <!--2 访问数据 -->
    <!--① JDBC模板：SimpleJdbcTemplate.模板还可捕获平台相关异常，"转化"成Spring的非检查型异常 -->
   <!--  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
        <constructor-arg ref="dataSource_jdbc" />
    </bean> -->
    <!-- DAO -->
  <!--   <bean id="jdbcSpitterDao" class="com.habuma.spitter.persistence.JdbcSpitterDao" >
         <property name="jdbcTemplate" ref="jdbcTemplate"/>  -->
        <!-- 或者直接配置dataSource属性，它会在其内部自动创建一个SimpleJdbcTemplate实例。就不需要明确声明 SimpleJdbcTemplate Bean了-->
       <!--  <property name="dataSource" ref="dataSource_jdbc" /> -->
   <!--  </bean> -->
    <!--② 集成Hibernate:Session 工厂 -->
   <!--  <bean id="sessionFactory_HL" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource_dbcp" />
        <property name="mappingResources">
           <list>
              <value>com/habuma/spitter/domain/Spitter.hbm.xml</value>
           </list>
        </property>
        <property name="hibernateProperties">
          <props>
            <prop key="dialect">org.hibernate.dialect.OracleDialect</prop> -->
            <!-- 需加上 hibernate.否则会报错-->
         <!--    <prop key="hibernate.show_sql">true</prop>
          </props>
        </property>
    </bean> -->
   <!-- 使用注解方式定义持久化 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource_dbcp" />
        <!-- 扫描使用注解的域类 -->
        <property name="packagesToScan" value="com.habuma.spitter.domain" />
        <property name="hibernateProperties">
          <props>
            <!-- <prop key="dialect">org.hibernate.dialect.HSQLDialect</prop> -->
            <prop key="dialect">org.hibernate.dialect.OracleDialect</prop>
            <prop key="hibernate.show_sql">true</prop>
            <prop key="hibernate.format_sql">true</prop>
            <prop key="hibernate.connection.characterEncoding">utf-8</prop> 
            <!-- 自动提交事务，否则数据库无法添加数据 -->
            <prop key="hibernate.connection.autocommit">true</prop>  
            <!-- 自动建表 -->
            <prop key="hibernate.hbm2ddl.auto">update</prop>
            <!-- 没有这个会报异常：No Hibernate Session bound to thread,添加之后：is not valid without active transaction -->
            <prop key="hibernate.current_session_context_class">thread</prop>
            <!-- <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate3.SpringSessionContext</prop> -->
            <!--  <prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop> -->
          </props>
        </property>
    </bean>
  
    <!-- 添加Hibernate 的异常转换-->
   <!--  <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" /> -->
    <!-- ③容器管理类型的JPA -->
    <bean id="emf" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource_dbcp"/>
         <!-- jpaVendorAdapter 指的是使用哪一个厂商的JPA实现 -->
        <property name="jpaVendorAdapter" ref="jpaVendorAdapter"/>
         <!-- By default, EclipseLink expects run-time weaving to be enabled -->
       <!--  <property name="loadTimeWeaver">
            <bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
        </property> -->
      
    </bean>
    <!-- EclipseLink的JPA实现 -->
    <bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter">
       <property name="database" value="HSQL" />
       <property name="showSql" value="true"/>
       <property name="generateDdl" value="false"/>
       <property name="databasePlatform" value="org.hibernate.dialect.OracleDialect"/>
    </bean>
    <!-- 用于检测@PersistenceContext注解 -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
    <!-- 如果Spring应用程序部署在应用服务器中，EntityManagerFactory可能已被Spring创建好了并置于JNDI中等待查询 -->
    <!-- <jee:jndi-lookup id="emf2" jndi-name="persistence/spitterPU"/> -->
    <!-- 应用程序管理类型的JPA -->
   <!--  <bean id="emf3" class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
       <property name="persistenceUnitName" value="spitterPU"/>
    </bean> -->
    
</beans>